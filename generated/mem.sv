// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// VCS coverage exclude_file
module mem_1024x32(	// src/main/scala/npc/mem.scala:17:26
  input  [9:0]  R0_addr,
  input         R0_en,
                R0_clk,
  output [31:0] R0_data,
  input  [9:0]  R1_addr,
  input         R1_en,
                R1_clk,
  output [31:0] R1_data,
  input  [9:0]  W0_addr,
  input         W0_en,
                W0_clk,
  input  [31:0] W0_data
);

  reg [31:0] Memory[0:1023];	// src/main/scala/npc/mem.scala:17:26
  reg        _R0_en_d0;	// src/main/scala/npc/mem.scala:17:26
  reg [9:0]  _R0_addr_d0;	// src/main/scala/npc/mem.scala:17:26
  always @(posedge R0_clk) begin	// src/main/scala/npc/mem.scala:17:26
    _R0_en_d0 <= R0_en;	// src/main/scala/npc/mem.scala:17:26
    _R0_addr_d0 <= R0_addr;	// src/main/scala/npc/mem.scala:17:26
  end // always @(posedge)
  reg        _R1_en_d0;	// src/main/scala/npc/mem.scala:17:26
  reg [9:0]  _R1_addr_d0;	// src/main/scala/npc/mem.scala:17:26
  always @(posedge R1_clk) begin	// src/main/scala/npc/mem.scala:17:26
    _R1_en_d0 <= R1_en;	// src/main/scala/npc/mem.scala:17:26
    _R1_addr_d0 <= R1_addr;	// src/main/scala/npc/mem.scala:17:26
  end // always @(posedge)
  always @(posedge W0_clk) begin	// src/main/scala/npc/mem.scala:17:26
    if (W0_en & 1'h1)	// src/main/scala/npc/mem.scala:17:26
      Memory[W0_addr] <= W0_data;	// src/main/scala/npc/mem.scala:17:26
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_MEM_	// src/main/scala/npc/mem.scala:17:26
    `ifdef RANDOMIZE_REG_INIT	// src/main/scala/npc/mem.scala:17:26
      reg [31:0] _RANDOM;	// src/main/scala/npc/mem.scala:17:26
    `endif // RANDOMIZE_REG_INIT
    reg [31:0] _RANDOM_MEM;	// src/main/scala/npc/mem.scala:17:26
    initial begin	// src/main/scala/npc/mem.scala:17:26
      `INIT_RANDOM_PROLOG_	// src/main/scala/npc/mem.scala:17:26
      `ifdef RANDOMIZE_MEM_INIT	// src/main/scala/npc/mem.scala:17:26
        for (logic [10:0] i = 11'h0; i < 11'h400; i += 11'h1) begin
          _RANDOM_MEM = `RANDOM;	// src/main/scala/npc/mem.scala:17:26
          Memory[i[9:0]] = _RANDOM_MEM;	// src/main/scala/npc/mem.scala:17:26
        end	// src/main/scala/npc/mem.scala:17:26
      `endif // RANDOMIZE_MEM_INIT
      `ifdef RANDOMIZE_REG_INIT	// src/main/scala/npc/mem.scala:17:26
        _RANDOM = {`RANDOM};	// src/main/scala/npc/mem.scala:17:26
        _R0_en_d0 = _RANDOM[0];	// src/main/scala/npc/mem.scala:17:26
        _R0_addr_d0 = _RANDOM[10:1];	// src/main/scala/npc/mem.scala:17:26
        _R1_en_d0 = _RANDOM[11];	// src/main/scala/npc/mem.scala:17:26
        _R1_addr_d0 = _RANDOM[21:12];	// src/main/scala/npc/mem.scala:17:26
      `endif // RANDOMIZE_REG_INIT
    end // initial
  `endif // ENABLE_INITIAL_MEM_
  assign R0_data = _R0_en_d0 ? Memory[_R0_addr_d0] : 32'bx;	// src/main/scala/npc/mem.scala:17:26
  assign R1_data = _R1_en_d0 ? Memory[_R1_addr_d0] : 32'bx;	// src/main/scala/npc/mem.scala:17:26
endmodule

module mem(	// src/main/scala/npc/mem.scala:8:7
  input         clock,	// src/main/scala/npc/mem.scala:8:7
                reset,	// src/main/scala/npc/mem.scala:8:7
  input  [31:0] io_im_addr,	// src/main/scala/npc/mem.scala:9:16
                io_dm_addr,	// src/main/scala/npc/mem.scala:9:16
                io_dm_in,	// src/main/scala/npc/mem.scala:9:16
  input         io_mem_wr,	// src/main/scala/npc/mem.scala:9:16
  output [31:0] io_im_out,	// src/main/scala/npc/mem.scala:9:16
                io_dm_out	// src/main/scala/npc/mem.scala:9:16
);

  wire [31:0] _mem_ext_R0_data;	// src/main/scala/npc/mem.scala:17:26
  wire [31:0] _mem_ext_R1_data;	// src/main/scala/npc/mem.scala:17:26
  mem_1024x32 mem_ext (	// src/main/scala/npc/mem.scala:17:26
    .R0_addr (io_im_addr[9:0]),	// src/main/scala/npc/mem.scala:26:25
    .R0_en   (~io_mem_wr),	// src/main/scala/npc/mem.scala:8:7, :17:26, :23:20, :26:25
    .R0_clk  (clock),
    .R0_data (_mem_ext_R0_data),
    .R1_addr (io_dm_addr[9:0]),	// src/main/scala/npc/mem.scala:27:25
    .R1_en   (~io_mem_wr),	// src/main/scala/npc/mem.scala:8:7, :17:26, :23:20, :26:25
    .R1_clk  (clock),
    .R1_data (_mem_ext_R1_data),
    .W0_addr (io_dm_addr[9:0]),	// src/main/scala/npc/mem.scala:24:12
    .W0_en   (io_mem_wr),
    .W0_clk  (clock),
    .W0_data (io_dm_in)
  );
  assign io_im_out = io_mem_wr ? 32'h0 : _mem_ext_R0_data;	// src/main/scala/npc/mem.scala:8:7, :17:26, :19:15, :23:20, :26:19
  assign io_dm_out = io_mem_wr ? 32'h0 : _mem_ext_R1_data;	// src/main/scala/npc/mem.scala:8:7, :17:26, :19:15, :20:15, :23:20, :27:19
endmodule


// ----- 8< ----- FILE "mem_1024x32_init.sv" ----- 8< -----

// Generated by CIRCT firtool-1.62.0
module mem_1024x32_init();	// src/main/scala/npc/mem.scala:17:26
  initial	// src/main/scala/npc/mem.scala:17:26
    $readmemh("mem.hex", mem_1024x32.Memory);	// src/main/scala/npc/mem.scala:17:26
endmodule

bind mem_1024x32 mem_1024x32_init mem_1024x32_init ();
