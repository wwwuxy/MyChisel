// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module adder(	// src/main/scala/book.scala:3:7
  input  [31:0] io_b,	// src/main/scala/book.scala:4:16
  output [31:0] io_y	// src/main/scala/book.scala:4:16
);

  assign io_y = io_b + 32'h1;	// src/main/scala/book.scala:3:7, :10:18
endmodule

module register(	// src/main/scala/book.scala:13:7
  input         clock,	// src/main/scala/book.scala:13:7
                reset,	// src/main/scala/book.scala:13:7
  input  [7:0]  io_d,	// src/main/scala/book.scala:14:16
  output [31:0] io_q	// src/main/scala/book.scala:14:16
);

  reg [7:0] reg_0;	// src/main/scala/book.scala:19:22
  always @(posedge clock) begin	// src/main/scala/book.scala:13:7
    if (reset)	// src/main/scala/book.scala:13:7
      reg_0 <= 8'h0;	// src/main/scala/book.scala:19:22
    else	// src/main/scala/book.scala:13:7
      reg_0 <= io_d;	// src/main/scala/book.scala:19:22
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// src/main/scala/book.scala:13:7
    `ifdef FIRRTL_BEFORE_INITIAL	// src/main/scala/book.scala:13:7
      `FIRRTL_BEFORE_INITIAL	// src/main/scala/book.scala:13:7
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// src/main/scala/book.scala:13:7
      automatic logic [31:0] _RANDOM[0:0];	// src/main/scala/book.scala:13:7
      `ifdef INIT_RANDOM_PROLOG_	// src/main/scala/book.scala:13:7
        `INIT_RANDOM_PROLOG_	// src/main/scala/book.scala:13:7
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// src/main/scala/book.scala:13:7
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;	// src/main/scala/book.scala:13:7
        reg_0 = _RANDOM[/*Zero width*/ 1'b0][7:0];	// src/main/scala/book.scala:13:7, :19:22
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// src/main/scala/book.scala:13:7
      `FIRRTL_AFTER_INITIAL	// src/main/scala/book.scala:13:7
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_q = {24'h0, reg_0};	// src/main/scala/book.scala:13:7, :19:22, :22:10
endmodule

module count10(	// src/main/scala/book.scala:25:7
  input         clock,	// src/main/scala/book.scala:25:7
                reset,	// src/main/scala/book.scala:25:7
  output [31:0] io_dout	// src/main/scala/book.scala:26:16
);

  wire [31:0] _reg_io_q;	// src/main/scala/book.scala:31:21
  wire [31:0] _add_io_y;	// src/main/scala/book.scala:30:21
  adder add (	// src/main/scala/book.scala:30:21
    .io_b (_reg_io_q),	// src/main/scala/book.scala:31:21
    .io_y (_add_io_y)
  );
  register reg_0 (	// src/main/scala/book.scala:31:21
    .clock (clock),
    .reset (reset),
    .io_d  (_add_io_y == 32'h9 ? 8'h0 : _add_io_y[7:0] + 8'h1),	// src/main/scala/book.scala:30:21, :39:{19,24,42}
    .io_q  (_reg_io_q)
  );
  assign io_dout = _reg_io_q;	// src/main/scala/book.scala:25:7, :31:21
endmodule

